 {
  "createdAt": "2025-06-10T14:23:16.689Z",
  "updatedAt": "2025-06-10T15:14:07.000Z",
  "id": "0DENKrEpmXKsPbyF",
  "name": "Faceless_Video",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.piapi.ai/api/v1/task",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"model\": \"Qubico/flux1-dev\",\n    \"task_type\": \"txt2img\",\n    \"input\": {\n        \"prompt\": \"{{ $json.output.replace(/\"/g, '') }}\",\n        \"width\": 540, \n        \"height\": 960\n    } \n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        520,
        -80
      ],
      "id": "53a3a46b-22ab-438d-9ce8-c693506e8368",
      "name": "Generate Image",
      "credentials": {
        "httpHeaderAuth": {
          "id": "XFbwKa04dmmrMeRl",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.piapi.ai/api/v1/task/{{ $json.data.task_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        -80
      ],
      "id": "b0bcd265-b6a3-434d-92a2-6cc54be30a34",
      "name": "Get Images",
      "credentials": {
        "httpHeaderAuth": {
          "id": "XFbwKa04dmmrMeRl",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Scene: {{ $('Get Images').item.json.data.input.prompt }}",
        "options": {
          "systemMessage": "=# Overview\nYou are a Master Sound Prompt Generator.\nYour task is to create vivid, immersive sound prompts based on a given scene. These prompts will be used to generate background audio that matches the mood and environment of the scene.\n\n## Instructions\n- Generate a one- to two-sentence prompt that captures the ambiance, tone, and key sound elements.\n- Use rich, evocative language to describe the background atmosphere, highlighting specific sounds (e.g., footsteps on cobblestone, distant chatter, wind rustling leaves, faint music, industrial hum).\n- Focus on the background audio â€” not dialogue, narration, or foreground sound effects.\n- Match the emotion and setting of the scene, whether it's calm, chaotic, eerie, festive, or serene.\n- Avoid vague descriptions; be specific and sensory-driven to maximize immersion.\n- Never include quotation marks (\"\") or newlines (\\n) in the output.\n\n## Output\nReturn only the crafted sound prompt text, ready to be used for an audio generation model.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1140,
        -80
      ],
      "id": "effecc52-7085-4d72-8870-f5691fd60e25",
      "name": "Sound Agent"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.elevenlabs.io/v1/sound-generation",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.output.replace(/\"/g, '') }}"
            },
            {
              "name": "duration_seconds",
              "value": "5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1500,
        -80
      ],
      "id": "8f16fccb-a711-4c98-a6ab-615272d2d3c2",
      "name": "Generate Audio",
      "credentials": {
        "httpHeaderAuth": {
          "id": "XFbwKa04dmmrMeRl",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "name": "={{ $('Get Videos').item.json.id }}.mp3",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1hhZhHBv0zm3adye9LE_sxwme7z7yUXw5",
          "mode": "list",
          "cachedResultName": "Audio Files",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1hhZhHBv0zm3adye9LE_sxwme7z7yUXw5"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1680,
        -80
      ],
      "id": "44b3e4c9-75ef-4014-a473-58a337b255fb",
      "name": "Upload to Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "iKdf7CY3j2tSUk8d",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "numberInputs": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1160,
        260
      ],
      "id": "6376cc70-7915-4053-b115-4e9c44e0976f",
      "name": "Merge"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.creatomate.com/v1/renders",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer "
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"template_id\": \"e19f26a1-dfb6-4a0d-a3ba-d394e398b3c9\",\n  \"modifications\": {\n    \"Video-1.source\": \"{{ $json.urls[0].url }}\",\n    \"Video-2.source\": \"{{ $json.urls[1].url }}\",\n    \"Video-3.source\": \"{{ $json.urls[2].url }}\",\n    \"Video-4.source\": \"{{ $json.urls[3].url }}\",\n    \"Audio-1.source\": \"{{ $json.urls[0].webContentLink }}\",\n    \"Audio-2.source\": \"{{ $json.urls[1].webContentLink }}\",\n    \"Audio-3.source\": \"{{ $json.urls[2].webContentLink }}\",\n    \"Audio-4.source\": \"{{ $json.urls[3].webContentLink }}\"\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1560,
        260
      ],
      "id": "cbfd66d1-1638-483b-8ccf-29ffc4c3a391",
      "name": "Render Video"
    },
    {
      "parameters": {
        "amount": 25
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1760,
        260
      ],
      "id": "5eb472f3-311e-4014-873f-b4454751c9e6",
      "name": "25 Seconds",
      "webhookId": "d5cd29e8-d3f7-491c-a6b6-2d705aa47931"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        480
      ],
      "id": "66300e64-1c73-4f33-9d19-490d8ecead26",
      "name": "Download Video"
    },
    {
      "parameters": {
        "content": "# Generate Image Prompts",
        "height": 540,
        "width": 740,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -300,
        -180
      ],
      "typeVersion": 1,
      "id": "b272a2e9-1b61-4832-8a61-b00ffff76da7",
      "name": "Sticky Note3",
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Generate Images\n",
        "height": 260,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        -180
      ],
      "typeVersion": 1,
      "id": "914eb0af-26b2-4cdf-bc94-84ebac765205",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "# Generate Audio\n\n",
        "height": 320,
        "width": 980,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1080,
        -180
      ],
      "typeVersion": 1,
      "id": "e111b3ad-71d7-4895-95de-8a89dacb8d2e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# Render & Log\n",
        "height": 500,
        "width": 1040
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1080,
        160
      ],
      "typeVersion": 1,
      "id": "5b8670bd-fc1b-4445-9835-ac8e2d64e70a",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "url": "=https://api.dev.runwayml.com/v1/tasks/{{ $json.id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Runway-Version",
              "value": "2024-11-06"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        200
      ],
      "id": "14e32d8e-c8e7-415a-810a-cad6a414e576",
      "name": "Get Videos",
      "credentials": {
        "httpHeaderAuth": {
          "id": "XFbwKa04dmmrMeRl",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.dev.runwayml.com/v1/image_to_video",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Runway-Version",
              "value": "2024-11-06"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "promptImage",
              "value": "={{ $json.data.output.image_url }}"
            },
            {
              "name": "model",
              "value": "gen3a_turbo"
            },
            {
              "name": "ratio",
              "value": "768:1280"
            },
            {
              "name": "duration",
              "value": "5"
            },
            {
              "name": "promptText",
              "value": "={{ $json.data.input.prompt.replace(/\"/g, '') }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        200
      ],
      "id": "9e0fa172-d4e5-4d90-90d3-e6baf780c150",
      "name": "Generate Videos",
      "credentials": {
        "httpHeaderAuth": {
          "id": "XFbwKa04dmmrMeRl",
          "name": "OpenAI"
        }
      }
    },
    {
      "parameters": {
        "content": "# Generate Videos\n",
        "height": 260,
        "width": 600,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        100
      ],
      "typeVersion": 1,
      "id": "bce7e6d9-e759-41a1-92ed-6c41de244e34",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "jsCode": "// N8n Code Node to extract URLs from output arrays and combine them into a single array\n// This code assumes your input JSON is in items[0].json or is multiple items\n// Determine data source format\nlet inputArray;\nif (items.length === 1 && Array.isArray(items[0].json)) {\n  // If we have a single item containing our array\n  inputArray = items[0].json;\n} else if (items.length > 1) {\n  // If we already have multiple items, each containing part of our data\n  inputArray = items.map(item => item.json || item);\n} else {\n  throw new Error('Input structure not recognized. Please check your data format.');\n}\n// Create a single array to hold all URLs\nconst urlArray = [];\n// Process each item in the input array\nfor (const item of inputArray) {\n  // Get the data object\n  const data = item;\n  \n  // Check if the item has an output array\n  if (data.output && Array.isArray(data.output)) {\n    // For each URL in the output array, add to our URL array\n    for (const url of data.output) {\n      // Add URL along with metadata including the web content link\n      urlArray.push({\n        url: url,\n        sourceId: data.id,\n        createdAt: data.createdAt,\n        webContentLink: data.webContentLink || null // Add the web content link\n      });\n    }\n  }\n}\n// Return a single item containing the array of all URLs\nreturn [{\n  json: {\n    urls: urlArray\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1360,
        260
      ],
      "id": "318456c2-a600-4841-9834-7da8af7c2422",
      "name": "Split Out Parts"
    },
    {
      "parameters": {
        "operation": "share",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "permissionsUi": {
          "permissionsValues": {
            "role": "reader",
            "type": "anyone",
            "allowFileDiscovery": true
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1880,
        -80
      ],
      "id": "f18cb4f4-7681-4361-b3b1-25e4cc288755",
      "name": "Share File",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "iKdf7CY3j2tSUk8d",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "videoTopic"
            },
            {
              "name": "chatID"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -240,
        -20
      ],
      "id": "2948a09e-414d-448f-ac03-ad63676a782c",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"Part 1\": \"Prompt for part 1\",\n  \"Part 2\": \"Prompt for part 2\",\n  \"Part 3\": \"Prompt for part 3\",\n  \"Part 4\": \"Prompt for part 4\"\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        140,
        160
      ],
      "id": "0157482f-4cd7-4e71-a4f2-e1860ddbfb4b",
      "name": "4 Parts"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Video Topic: {{ $json.videoTopic }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=# Overview\nYou are a Master Visual Story Structuring Agent.\nYour task is to take a given short video topic and split it into four parts that together form a cohesive, vivid story, optimized for text-to-image generation.\n\n## Instructions:\n- You must create exactly four parts: Part 1, Part 2, Part 3, and Part 4.\n- Describe the subject of the story in the EXACT same way in all four parts. Each part should be consistent.\n- Each part should build upon the previous, creating a complete visual story by the end.\n- Every part must be written as a high-quality, richly detailed image prompt, following professional standards for models like Flux or similar.\n- Describe characters, settings, outfits, actions, and background elements vividly and precisely.\n- Use rich, imaginative language to maximize visual fidelity.\n- Avoid generic terms â€” always opt for specific and colorful descriptions.\n- No quotation marks (\"\") or newlines (\\n) should be included in the output.\n- Keep the description natural and seamless so it can be fed directly into a text-to-image model.\n\n## Key Elements to Include in Each Part:\n- Clear description of main subjects (appearance, outfits, facial expressions, poses)\n- Accessories or objects that add to the scene\n- A vivid background that matches the theme and enhances the overall story\n- Consistency and natural progression from part to part\n\n## Output Format:\nReturn your response structured into four fields:\n- Part 1: [Vivid image prompt for Part 1]\n- Part 2: [Vivid image prompt for Part 2]\n- Part 3: [Vivid image prompt for Part 3]\n- Part 4: [Vivid image prompt for Part 4]\n\nOnly output the fields listed above.\nMake sure the story across all four parts feels cohesive, visually rich, and cinematic."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -60,
        -20
      ],
      "id": "f77890f8-99b7-4c54-b1c2-57d2fd4ff3f0",
      "name": "Image Prompt Agent"
    },
    {
      "parameters": {
        "fieldToSplitOut": "output",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        260,
        -20
      ],
      "id": "d9f8d7bd-dcc9-479b-be5f-ad8ea70a1bb6",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "sendVideo",
        "chatId": "={{ $('When Executed by Another Workflow').first().json.chatID }}",
        "binaryData": true,
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1340,
        480
      ],
      "id": "64b1deaa-def8-4bba-bbf8-82182ef045fa",
      "name": "Send Video",
      "webhookId": "cdeb2987-d275-480b-8532-f69bbed64999",
      "credentials": {
        "telegramApi": {
          "id": "HH5qunsyEprskkCr",
          "name": "Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Video: {{ $('When Executed by Another Workflow').first().json.videoTopic }}"
            },
            {
              "content": "Create a 3-4 word title for the given video",
              "role": "system"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1540,
        480
      ],
      "id": "bafd13a0-44f0-4a56-9dd6-7a197f236597",
      "name": "Title",
      "credentials": {
        "openAiApi": {
          "id": "opkNg3RQ0U03w9cG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1JqOTd49heNBdmrf5hSwxI66X724tspAmSjzWoA6-EU0",
          "mode": "list",
          "cachedResultName": "Marketing Team Log",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1JqOTd49heNBdmrf5hSwxI66X724tspAmSjzWoA6-EU0/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1JqOTd49heNBdmrf5hSwxI66X724tspAmSjzWoA6-EU0/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "={{ $json.message.content }}",
            "Request": "={{ $('When Executed by Another Workflow').first().json.videoTopic }}",
            "Link": "={{ $('Download Video').item.json.url }}",
            "Type": "Video"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Title",
              "displayName": "Title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Type",
              "displayName": "Type",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Request",
              "displayName": "Request",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Link",
              "displayName": "Link",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Post",
              "displayName": "Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        1900,
        480
      ],
      "id": "03a570ed-7beb-4165-90d6-995427c35de7",
      "name": "Log Video",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "bPw5uPT3yg6wYdK9",
          "name": "Google Sheets (Tharun)"
        }
      }
    },
    {
      "parameters": {
        "amount": 90
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        700,
        -80
      ],
      "id": "3c7ba5c1-eeaf-46ea-8968-f0f5ded40902",
      "name": "90 Seconds",
      "webhookId": "ffdc5132-c0fe-44f6-af2b-4b3bb8894153"
    },
    {
      "parameters": {
        "amount": 90
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        700,
        200
      ],
      "id": "3238a635-e8eb-4cb3-a8d3-df590dc578d5",
      "name": "90_Seconds",
      "webhookId": "3ce99001-8f5a-4c0a-9b25-e3e261fcc778"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -40,
        200
      ],
      "id": "e98b15d6-c207-4c15-bc2e-d8e88f4fe5e8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "opkNg3RQ0U03w9cG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1080,
        80
      ],
      "id": "95a6c347-7f9a-4b78-a67c-0adad84eb94b",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "opkNg3RQ0U03w9cG",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "connections": {
    "Generate Image": {
      "main": [
        [
          {
            "node": "90 Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Images": {
      "main": [
        [
          {
            "node": "Generate Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sound Agent": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Upload to Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Drive": {
      "main": [
        [
          {
            "node": "Share File",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Split Out Parts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render Video": {
      "main": [
        [
          {
            "node": "25 Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "25 Seconds": {
      "main": [
        [
          {
            "node": "Download Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Video": {
      "main": [
        [
          {
            "node": "Send Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Videos": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Sound Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Videos": {
      "main": [
        [
          {
            "node": "90_Seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out Parts": {
      "main": [
        [
          {
            "node": "Render Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Share File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Image Prompt Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "4 Parts": {
      "ai_outputParser": [
        [
          {
            "node": "Image Prompt Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Image Prompt Agent": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Generate Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Video": {
      "main": [
        [
          {
            "node": "Title",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Title": {
      "main": [
        [
          {
            "node": "Log Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "90 Seconds": {
      "main": [
        [
          {
            "node": "Get Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "90_Seconds": {
      "main": [
        [
          {
            "node": "Get Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Image Prompt Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Sound Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "videoTopic": "A beaver building a house, showing the beaver gathering sticks, arranging them by a riverbank, creating a dam and then constructing a cozy lodge inside.",
          "chatID": 8056822155
        }
      }
    ]
  },
  "versionId": "13b8eed9-a0a6-490b-8ae4-9e98ea3bd45d",
  "triggerCount": 0,
  "shared": [
    {
      "createdAt": "2025-06-10T14:23:16.694Z",
      "updatedAt": "2025-06-10T14:23:16.694Z",
      "role": "workflow:owner",
      "workflowId": "0DENKrEpmXKsPbyF",
      "projectId": "dG371lM6unPJd2qz"
    }
  ],
  "tags": []
}