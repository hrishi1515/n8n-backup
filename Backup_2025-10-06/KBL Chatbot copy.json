 {
  "createdAt": "2025-07-15T08:06:18.826Z",
  "updatedAt": "2025-07-23T07:12:47.000Z",
  "id": "h6EZjRp9gZh8eEXU",
  "name": "KBL Chatbot copy",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "1059c99e-21c1-4fa5-80e4-73dd3a9bcd17",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -680,
        380
      ],
      "credentials": {
        "openAiApi": {
          "id": "opkNg3RQ0U03w9cG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Agent Tools for RAG",
        "height": 528.85546469693,
        "width": 583.4552380860637,
        "color": 4
      },
      "id": "56f6bde8-23f3-4134-96aa-66f8596ee4bf",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        60,
        20
      ]
    },
    {
      "parameters": {},
      "id": "c352d842-749d-4f02-93af-c95b20112489",
      "name": "Custom Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1,
      "position": [
        -440,
        420
      ],
      "notesInFlow": false
    },
    {
      "parameters": {
        "content": "## RAG AI Agent with Chat Interface",
        "height": 464.8027193303974,
        "width": 1035.6381264595484
      },
      "id": "f98cdec9-f7f2-405c-bcc1-6e5fdafe2939",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -980,
        80
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2d07ab7f-3fcf-435c-a185-3a3821218227",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        80,
        60
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body?.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body?.sessionId || 'default_session' }}",
              "type": "string"
            },
            {
              "id": "c80831d8-c653-4203-8706-adedfdb98f88",
              "name": "sender",
              "value": "={{ $json?.sender || $json?.body?.sender || 'user' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "e71a9719-eae4-45ae-b5ee-faaa3dac81d4",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -740,
        160
      ]
    },
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "id": "079b13d0-262f-4caf-9a04-a8ddfb309515",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -940,
        160
      ],
      "webhookId": "e104e40e-6134-4825-a6f0-8a646d882662"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d",
              "leftValue": "={{ $json.sender }}",
              "rightValue": "human_agent",
              "operator": {
                "type": "string",
                "operation": "equals",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6817e6f4-9343-4256-ba91-e501825fba9b",
      "name": "Check Sender Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -580,
        160
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a specialized assistant for retrieving information about pumps from the company named KBL. You help users find pumps based on their application, pricing, and specifications using both unstructured documents (TXT, DOCX, extracted PDFs) and structured tabular data (CSVs, Excel, JSONB in PostgreSQL).\n\nSearch Strategy:\nUser Query Analysis\n\nIf a user asks for \"pumps\" or \"water pumps\" or \"another pumps\" without specifying the application, prompt them to clarify the intended use by suggesting options such as:\nGardening\nIrrigation\nResidential Pressure Boosting\nCommercial & Industrial Use\nDewatering\nFirefighting\nAgriculture\nor any other application of your use case\nOnce the user specifies the application, refine the search accordingly.\ncollect essential information before recommending a product.\nIf the user specifies an application (even if it's not in the predefined list), attempt to search for it dynamically:\nFirst, search in the structured table (document_rows) using SQL to find pumps where the row_data->>'categories' or row_data->>'description' contains the specified application.\nIf no results are found, attempt a RAG-based search on text-based documents.\nIf the query involves pricing, specifications, or comparisons, execute SQL queries to filter the pumps accordingly.\nInformation Retrieval Methods:\n\nGeneral Pump Information (Applications, Features, Descriptions): Use RAG (Retrieval-Augmented Generation) to extract relevant content from the documents table.\nSpecific Pump Details (Pricing, Filtering, Comparisons): Generate SQL queries using a specialized SQL-generation tool to search structured product data from the document_rows table.\nHybrid Search: Combine both approaches when necessary.\nSQL Query Generation for Structured Search:\nSQL Query Generation Rules:\nTable: document_rows\nProduct Data is stored in a JSONB field (row_data), so extract values like this:\nrow_data->>'name' ‚Üí Product name\nrow_data->>'price' ‚Üí Regular price\nrow_data->>'special_price' ‚Üí Discounted price\nrow_data->>'categories' ‚Üí Product categories or application\nrow_data->>'description' ‚Üí Detailed product overview and also contains application\nrow_data->>'url_key' ‚Üí Product URL key (for generating product links)\nUse ILIKE for searches to make them case-insensitive.\n\nUser Interaction Flow:\nWorkflow:\nAlways attempt RAG first, unless the query explicitly requires filtering by price, category, or application.\nIf RAG does not yield relevant results, check available documents in the document_metadata table to find the most relevant ones.\nFor tabular data, construct SQL queries to search the document_rows table, using JSONB field extraction.\nIf the user asks for a product by application, generate an SQL query that searches the \"categories\" and \"description\" fields in the row_data (JSONB) column of the document_rows table.\nIf the user asks for pricing-related queries (e.g., \"pumps under $5,000\"), filter results based on price.\nIf the user requests sorting (e.g., cheapest, most expensive), adjust the query accordingly.\nReturn only the first 3 matching pumps.\nResponse Format:\nIf using RAG, provide pump details in a structured way.\nIf using SQL, return a concise list of the top 3 pumps, including:\nName\nPrice (it is in rupees)\nApplication\nProduct Link ‚Üí url_key\nFormula:\nlink = url_key\nTransparency: If no relevant results are found, inform the user instead of making assumptions.\nHandling Unanswered or Non-Pump Queries:\nIf a user asks for human support or query is not related to pumps or no relevant data is found, provide the contact details and toll-free number.\nüìû Toll-Free Number: 1800-123-4443\nüè¢ Office Address:\nKirloskar Brothers Limited\nYamuna, S.No.98(3 to 7), Plot No.3,\nBaner, Pune 411045, Maharashtra, INDIA\nüîó Visit our website: https://www.kirloskarpumps.com"
        }
      },
      "id": "b1524854-810a-47c3-a906-caf3b9393715",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -380,
        260
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO n8n_chat_histories (session_id, message, sender_type, created_at) VALUES ($1, $2, $3, NOW()) ON CONFLICT (session_id) DO UPDATE SET message = EXCLUDED.message, sender_type = EXCLUDED.sender_type, created_at = EXCLUDED.created_at",
        "options": {
          "queryReplacement": "={{ [$json.sessionId, $json.chatInput, $json.sender] }}"
        }
      },
      "id": "1ddc927e-80eb-4804-b7d8-5443021f9cbd",
      "name": "Store Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -400,
        100
      ],
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "human-response-id",
              "name": "output",
              "value": "={{ $('Check Sender Type').item.json.chatInput }}",
              "type": "string"
            },
            {
              "id": "human-sender-id",
              "name": "sender",
              "value": "human_agent",
              "type": "string"
            },
            {
              "id": "human-session-id",
              "name": "sessionId",
              "value": "={{ $('Check Sender Type').item.json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "41f303cb-bb6d-4858-a59e-589b94b3f8ca",
      "name": "Format Human Agent Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -80,
        100
      ]
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file. This helps understand what data is available for querying.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -240,
        440
      ],
      "id": "0d1c7f37-dc4c-4310-9483-3583d43298e8",
      "name": "List Documents",
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text content from the document. Use this when you need to retrieve the full text content of a specific document.",
        "operation": "executeQuery",
        "query": "SELECT string_agg(content, ' ') as document_text FROM documents WHERE metadata->>'file_id' = $1 GROUP BY metadata->>'file_id'",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        -60,
        440
      ],
      "id": "5f1b2687-0094-403d-8658-ddb70f3e9d15",
      "name": "Get File Contents",
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Execute SQL queries to search product data stored in JSONB format. Use this for specific product searches, price filtering, category filtering, and sorting. Always limit results to top 7 products for better performance.",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        120,
        460
      ],
      "id": "88f18fc2-1434-44f7-9074-29de2122bcdd",
      "name": "Query Document Rows",
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to search through unstructured documents for general pump information, features, and descriptions. This is ideal for exploratory queries and when you need contextual information.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        280,
        140
      ],
      "id": "82135c4c-ecc4-4b2e-b224-5d629206bebd",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "e7A13j05yIr5nwyM",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        540,
        340
      ],
      "id": "8328e1c4-7cc0-452d-b141-f7146f347941",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "opkNg3RQ0U03w9cG",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO n8n_chat_histories (session_id, message, sender_type, created_at) \nVALUES ($1, $2, $3, NOW())",
        "options": {
          "queryReplacement": "=={{ [$json.sessionId, $('RAG AI Agent').item.json.output || '', 'assistant'] }}"
        }
      },
      "id": "f5cdb54e-19c8-4848-850d-62fcaf0dc324",
      "name": "Store AI Response",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        160,
        240
      ],
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieve recent chat history for the current session to maintain context. This helps provide personalized responses based on previous interactions.",
        "operation": "executeQuery",
        "query": "SELECT message, sender_type, created_at FROM n8n_chat_histories WHERE session_id = $1 ORDER BY created_at DESC LIMIT 10",
        "options": {
          "queryReplacement": "={{ $fromAI('session_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        360,
        420
      ],
      "id": "11b8565a-a9a9-47fb-be37-ac0a2dc29076",
      "name": "Get Chat History",
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    }
  ],
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Custom Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Check Sender Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Sender Type": {
      "main": [
        [
          {
            "node": "Store Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent": {
      "main": [
        [
          {
            "node": "Store AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Message": {
      "main": [
        [
          {
            "node": "Format Human Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Human Agent Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store AI Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Get Chat History": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "56acd3e1-4fdb-4de1-9f57-ba22be449968",
  "triggerCount": 1,
  "shared": [
    {
      "createdAt": "2025-07-15T08:06:18.832Z",
      "updatedAt": "2025-07-15T08:06:18.832Z",
      "role": "workflow:owner",
      "workflowId": "h6EZjRp9gZh8eEXU",
      "projectId": "dG371lM6unPJd2qz"
    }
  ],
  "tags": []
}