 {
  "createdAt": "2025-09-24T11:35:41.755Z",
  "updatedAt": "2025-09-25T16:06:45.000Z",
  "id": "J51uVojbUc3L66n0",
  "name": "KBL NEW",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "public": true,
        "mode": "webhook",
        "options": {}
      },
      "id": "eebb238e-d277-40d4-afca-8af4ebf3346e",
      "name": "Chat Webhook Trigger",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        800,
        -120
      ],
      "webhookId": "enhanced-kbl-chatbot"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "extract-user-input",
              "name": "userMessage",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "extract-session-id",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId || 'default_session' }}",
              "type": "string"
            },
            {
              "id": "extract-sender",
              "name": "sender",
              "value": "={{ $json?.sender || $json?.body?.sender || 'user' }}",
              "type": "string"
            },
            {
              "id": "extract-user-id",
              "name": "userId",
              "value": "={{ $json?.userId || $json?.body?.userId || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "026e7e97-5b9e-493d-80b0-93a283b6430c",
      "name": "Extract Input Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1000,
        -120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Intent Classification Logic\nconst userMessage = $input.first().json.userMessage.toLowerCase();\nconst sessionId = $input.first().json.sessionId;\n\n// Define intent patterns\nconst intents = {\n  product_search: [\n    'pump', 'water pump', 'need a pump', 'looking for pump', 'want to buy',\n    'gardening', 'irrigation', 'residential', 'commercial', 'industrial',\n    'dewatering', 'firefighting', 'agriculture', 'pressure boosting'\n  ],\n  product_info: [\n    'warranty', 'manual', 'horse power', 'specifications', 'spec', 'hp',\n    'power', 'capacity', 'flow rate', 'head', 'pressure', 'technical',\n    'datasheet', 'catalog', 'brochure'\n  ],\n  authentication: [\n    'login', 'sign in', 'mobile', 'phone', 'otp', 'verify', 'account',\n    'profile', 'my account'\n  ],\n  order_list: [\n    'my orders', 'order history', 'past orders', 'previous orders',\n    'order list', 'orders'\n  ],\n  order_details: [\n    'order status', 'track order', 'order #', 'order number',\n    'shipping', 'delivery', 'track', 'status'\n  ],\n  cart: [\n    'cart', 'basket', 'added items', 'my cart', 'shopping cart',\n    'add to cart', 'remove from cart'\n  ],\n  help_agent: [\n    'help', 'support', 'agent', 'human', 'talk to agent',\n    'customer service', 'assistance', 'manual help'\n  ],\n  contact_info: [\n    'contact', 'address', 'phone number', 'email', 'location',\n    'office', 'toll free', 'customer care'\n  ]\n};\n\n// Classification function\nfunction classifyIntent(message) {\n  for (const [intent, keywords] of Object.entries(intents)) {\n    for (const keyword of keywords) {\n      if (message.includes(keyword)) {\n        return intent;\n      }\n    }\n  }\n  return 'general_query'; // Default fallback\n}\n\nconst detectedIntent = classifyIntent(userMessage);\n\nreturn {\n  json: {\n    userMessage,\n    sessionId,\n    detectedIntent,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "838e99c3-e099-4288-9a39-e6af21cb6fbd",
      "name": "Intent Classifier",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        -120
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "1dbcee85-4123-4430-9133-ffe8ee296546"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "8294e364-5fba-44e6-950f-be5394a7acfd",
      "name": "Intent Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1400,
        -120
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.magento_graphql_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query { categories { items { id name path children { id name path } } } }"
            }
          ]
        },
        "options": {}
      },
      "id": "24fe3f9c-8184-4e94-849a-f36ee85c25ce",
      "name": "Fetch Categories",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1700,
        -320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format categories for user selection\nconst categories = $input.first().json.data?.categories?.items || [];\nconst userMessage = $('Intent Classifier').first().json.userMessage;\n\n// Create category buttons\nconst categoryButtons = categories.slice(0, 6).map(cat => ({\n  type: \"postback\",\n  title: cat.name,\n  payload: `category_${cat.id}_${cat.name}`\n}));\n\n// Generate response based on user query\nlet responseText = \"What type of pump are you looking for?\";\n\nif (userMessage.includes('gardening')) {\n  responseText = \"Great! I can help you find gardening pumps. Here are the available categories:\";\n} else if (userMessage.includes('irrigation')) {\n  responseText = \"Perfect for irrigation needs! Here are our pump categories:\";\n} else if (userMessage.includes('commercial') || userMessage.includes('industrial')) {\n  responseText = \"For commercial & industrial use, here are our pump categories:\";\n}\n\nreturn {\n  json: {\n    text: responseText,\n    buttons: categoryButtons,\n    quickReplies: [\n      { content_type: \"text\", title: \"All Categories\", payload: \"show_all_categories\" },\n      { content_type: \"text\", title: \"Price Range\", payload: \"price_filter\" }\n    ],\n    type: 'category_selection'\n  }\n};"
      },
      "id": "e276b7ed-3b09-4965-860d-e1818c8f7c5f",
      "name": "Format Category Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        -320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.magento_graphql_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query getProducts($filter: ProductAttributeFilterInput, $pageSize: Int, $currentPage: Int) { products(filter: $filter, pageSize: $pageSize, currentPage: $currentPage) { items { id name sku price_range { minimum_price { final_price { value currency } } } small_image { url } url_key short_description { html } } page_info { current_page total_pages } total_count } }"
            },
            {
              "name": "variables",
              "value": "={{ { \"filter\": { \"category_id\": { \"eq\": $json.categoryId } }, \"pageSize\": 6, \"currentPage\": 1 } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "b2919fd4-a3dd-4873-85db-bce0d3848aa1",
      "name": "Fetch Products by Category",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1700,
        -20
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format products as cards with buttons\nconst products = $input.first().json.data?.products?.items || [];\n\nconst productCards = products.map(product => ({\n  type: \"card\",\n  title: product.name,\n  subtitle: `₹${product.price_range.minimum_price.final_price.value} ${product.price_range.minimum_price.final_price.currency}`,\n  image: product.small_image?.url || '',\n  description: product.short_description?.html?.replace(/<[^>]*>/g, '').substring(0, 100) + '...',\n  buttons: [\n    {\n      type: \"postback\",\n      title: \"View Details\",\n      payload: `view_product_${product.id}`\n    },\n    {\n      type: \"postback\", \n      title: \"Add to Cart\",\n      payload: `add_to_cart_${product.id}`\n    }\n  ],\n  url: product.url_key\n}));\n\nreturn {\n  json: {\n    text: `Found ${products.length} pumps for you:`,\n    cards: productCards,\n    attachment: {\n      type: \"template\",\n      payload: {\n        template_type: \"generic\",\n        elements: productCards\n      }\n    },\n    quickReplies: [\n      { content_type: \"text\", title: \"Show More\", payload: \"load_more_products\" },\n      { content_type: \"text\", title: \"Filter by Price\", payload: \"price_filter\" }\n    ]\n  }\n};"
      },
      "id": "a27a9aeb-58ec-41cf-a41b-5b89f48cd879",
      "name": "Format Product Cards",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        -20
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "0bbacd5b-e8ab-4812-a822-07313df17f65"
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "3a6cd540-5779-44b8-b0a4-5a328d57e4fb",
      "name": "Authentication & Order Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1400,
        180
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT token, mobile, expires_at FROM user_sessions WHERE session_id = $1 AND expires_at > NOW()",
        "options": {
          "queryReplacement": "={{ [$json.sessionId] }}"
        }
      },
      "id": "5954d872-c32d-48af-89c2-c459f8bdcb92",
      "name": "Check User Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1660,
        180
      ],
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "session-exists",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c06ebd8f-332a-4445-b6be-748547b04f3f",
      "name": "Session Exists?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1920,
        120
      ]
    },
    {
      "parameters": {
        "jsCode": "// Request mobile number for authentication\nreturn {\n  json: {\n    text: \"To access your orders and account information, please provide your mobile number:\",\n    inputType: \"phone\",\n    buttons: [\n      {\n        type: \"postback\",\n        title: \"Enter Mobile\", \n        payload: \"request_mobile\"\n      }\n    ],\n    expectedResponse: \"mobile_number\"\n  }\n};"
      },
      "id": "b296fcc4-af69-4bcc-90e2-20debac5f2ef",
      "name": "Request Mobile Number",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2100,
        -20
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.auth_api_url }}/send-otp",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "mobile",
              "value": "={{ $json.mobile }}"
            }
          ]
        },
        "options": {}
      },
      "id": "56447d1d-5395-433f-8a3c-cb113989d302",
      "name": "Send OTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2300,
        -20
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.auth_api_url }}/verify-otp",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "mobile",
              "value": "={{ $json.mobile }}"
            },
            {
              "name": "otp",
              "value": "={{ $json.otp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4247033f-488f-4b60-b3b4-6a4c8f094f6e",
      "name": "Verify OTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2500,
        -20
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO user_sessions (session_id, token, mobile, expires_at) VALUES ($1, $2, $3, $4) ON CONFLICT (session_id) DO UPDATE SET token = $2, mobile = $3, expires_at = $4",
        "options": {
          "queryReplacement": "={{ [$json.sessionId, $json.access_token, $json.mobile, new Date(Date.now() + 24*60*60*1000).toISOString()] }}"
        }
      },
      "id": "8261b577-562a-4207-b9c4-8f1129dfd98e",
      "name": "Store User Session",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2700,
        -20
      ],
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.magento_graphql_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query getCustomerOrders($pageSize: Int, $currentPage: Int) { customer { orders(pageSize: $pageSize, currentPage: $currentPage) { items { id number order_date status total { grand_total { value currency } } } page_info { current_page total_pages } } } }"
            },
            {
              "name": "variables",
              "value": "={{ { \"pageSize\": 10, \"currentPage\": 1 } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6989a962-6b9c-41b9-a691-ebb01bf74870",
      "name": "Fetch User Orders",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1900,
        280
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format orders list\nconst orders = $input.first().json.data?.customer?.orders?.items || [];\n\nif (orders.length === 0) {\n  return {\n    json: {\n      text: \"You don't have any orders yet. Browse our pumps to place your first order!\",\n      buttons: [\n        {\n          type: \"postback\",\n          title: \"Browse Pumps\",\n          payload: \"browse_products\"\n        }\n      ]\n    }\n  };\n}\n\nconst orderList = orders.map((order, index) => \n  `${index + 1}. Order #${order.number}\\n` +\n  `📅 Date: ${new Date(order.order_date).toLocaleDateString()}\\n` +\n  `💰 Total: ${order.total.grand_total.currency} ${order.total.grand_total.value}\\n` +\n  `📊 Status: ${order.status}\\n`\n).join('\\n---\\n');\n\nconst orderButtons = orders.slice(0, 3).map(order => ({\n  type: \"postback\",\n  title: `Order #${order.number}`,\n  payload: `order_details_${order.id}`\n}));\n\nreturn {\n  json: {\n    text: `📦 Your Recent Orders:\\n\\n${orderList}`,\n    buttons: orderButtons.concat([\n      {\n        type: \"postback\",\n        title: \"View All Orders\",\n        payload: \"view_all_orders\"\n      }\n    ])\n  }\n};"
      },
      "id": "048661f6-ed35-402d-8dc8-6cd10b1c90ea",
      "name": "Format Orders List",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2100,
        280
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.magento_graphql_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "query getOrderDetails($orderId: String!) { customer { orders(filter: {number: {eq: $orderId}}) { items { id number order_date status total { grand_total { value currency } } shipping_address { firstname lastname street telephone city region { label } postcode country_code } items { id product_name product_sku quantity_ordered product_sale_price { value currency } } } } } }"
            },
            {
              "name": "variables",
              "value": "={{ { \"orderId\": $json.orderId } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2546d269-a4ff-438d-bf8f-bd1b28218d43",
      "name": "Fetch Order Details",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1900,
        480
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.magento_graphql_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "mutation addProductToCart($cartId: String!, $cartItems: [CartItemInput!]!) { addProductsToCart(cartId: $cartId, cartItems: $cartItems) { cart { id items { id product { name sku } quantity } } } }"
            },
            {
              "name": "variables",
              "value": "={{ { \"cartId\": $json.cartId, \"cartItems\": [{ \"sku\": $json.productSku, \"quantity\": 1 }] } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "92f48534-5a3b-40e8-856c-0fb7afb5fd4e",
      "name": "Add to Cart",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1700,
        680
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "6732bafe-abb0-4a09-bac8-352acc476fb1",
      "name": "Help & Contact Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1400,
        580
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $('Global Settings').first().json.ticket_api_url }}/create-ticket",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_details",
              "value": "={{ { \"sessionId\": $json.sessionId, \"mobile\": $json.mobile || 'Not provided' } }}"
            },
            {
              "name": "query",
              "value": "={{ $json.userMessage }}"
            },
            {
              "name": "source",
              "value": "chatbot"
            },
            {
              "name": "priority",
              "value": "medium"
            }
          ]
        },
        "options": {}
      },
      "id": "1d9b4685-8cc8-402a-a0c4-9ec662399c02",
      "name": "Create Support Ticket",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1700,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Format contact information response\nconst ticketNumber = $input.first().json.ticket_number;\n\nreturn {\n  json: {\n    text: `🎫 Support ticket created successfully!\\n\\nTicket Number: #${ticketNumber}\\n\\nOur team will contact you soon. You can also reach us directly:\\n\\n📞 Toll-Free: 1800-123-4443\\n📧 Email: support@kirloskarpumps.com\\n\\n🏢 Office Address:\\nKirloskar Brothers Limited\\nYamuna, S.No.98(3 to 7), Plot No.3,\\nBaner, Pune 411045, Maharashtra, INDIA\\n\\n🌐 Website: https://www.kirloskarpumps.com`,\n    buttons: [\n      {\n        type: \"web_url\",\n        title: \"Visit Website\",\n        url: \"https://www.kirloskarpumps.com\"\n      },\n      {\n        type: \"postback\",\n        title: \"Talk to Agent\",\n        payload: \"connect_human_agent\"\n      }\n    ]\n  }\n};"
      },
      "id": "726c4db8-8f2a-45a5-9d10-46a26ed356a2",
      "name": "Format Contact Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        480
      ]
    },
    {
      "parameters": {
        "jsCode": "// Just provide contact info without creating ticket\nreturn {\n  json: {\n    text: `📞 Kirloskar Brothers Limited - Contact Information\\n\\n📞 Toll-Free: 1800-123-4443\\n📧 Email: support@kirloskarpumps.com\\n\\n🏢 Office Address:\\nKirloskar Brothers Limited\\nYamuna, S.No.98(3 to 7), Plot No.3,\\nBaner, Pune 411045, Maharashtra, INDIA\\n\\n🌐 Website: https://www.kirloskarpumps.com\\n\\n🕒 Business Hours: 9:00 AM - 6:00 PM (Mon-Sat)\",\n    buttons: [\n      {\n        type: \"web_url\",\n        title: \"Visit Website\",\n        url: \"https://www.kirloskarpumps.com\"\n      },\n      {\n        type: \"postback\",\n        title: \"Create Support Ticket\",\n        payload: \"create_ticket\"\n      }\n    ]\n  }\n};"
      },
      "id": "3b6b70b1-c8d0-4d7b-b2c9-0bd0e2a4f673",
      "name": "Contact Info Only",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        680
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "48be450b-3c0f-4fd3-8dbf-7c260c92597e",
      "name": "RAG Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1400,
        880
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.userMessage }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a specialized assistant for Kirloskar Brothers Limited (KBL) water pumps. Help users with product information, specifications, applications, and technical queries. Use the available tools to search for relevant information.\\n\\nWhen users ask about product specifications like warranty, horse power, technical details, or manuals:\\n1. Use RAG search to find relevant documentation\\n2. Use SQL queries for structured product data\\n3. Provide specific, accurate information\\n4. Include product links when available\\n\\nFor general queries about pump applications, use RAG to provide comprehensive information from the knowledge base.\\n\\nIf you cannot find specific information, direct users to contact support with the toll-free number: 1800-123-4443"
        }
      },
      "id": "4a81d429-3874-4525-aad7-38d3a91439d4",
      "name": "Enhanced RAG Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        1700,
        880
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "88035b36-4911-415b-861e-ad423e74a8b2",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        1560,
        1080
      ],
      "credentials": {
        "openAiApi": {
          "id": "uVuI5GtGYr0suRcM",
          "name": "OpenAi account 2 test"
        }
      }
    },
    {
      "parameters": {},
      "id": "0fd52801-9075-4605-9f28-75c95d93961b",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        1700,
        1080
      ],
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents and their schema information for CSV/Excel files.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        1840,
        1100
      ],
      "id": "ca3d52cb-286a-4dc0-bac9-7e9c368fdb86",
      "name": "List Documents Tool",
      "credentials": {
        "postgres": {
          "id": "OppxKTuR17k2wxru",
          "name": "Postgres account 7"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the complete text content from the document.",
        "operation": "executeQuery",
        "query": "SELECT string_agg(content, ' ') as document_text FROM documents WHERE metadata->>'file_id' = $1 GROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        2200,
        1080
      ],
      "id": "364c8978-8ed6-4143-bf7d-55af13e1dba6",
      "name": "Get File Contents Tool"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Enhanced SQL query tool for searching product information. Use this for price filtering, category-based searches, and specific product lookups.",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        2580,
        1080
      ],
      "id": "e44a87a1-d712-40ab-ae73-813fe7510370",
      "name": "Enhanced Query Document Rows"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase about pumps, applications, specifications, and technical details.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list"
        },
        "topK": 10,
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2960,
        980
      ],
      "id": "84ef3b9a-897d-423c-9903-5608d98ebe00",
      "name": "Supabase Vector Store"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        3180,
        1080
      ],
      "id": "afd04d4d-57fe-499a-b7b0-ff575f6de0a2",
      "name": "OpenAI Embeddings"
    },
    {
      "parameters": {
        "jsCode": "// Global configuration settings\nreturn {\n  json: {\n    magento_graphql_url: 'https://your-magento-domain.com/graphql',\n    auth_api_url: 'https://your-auth-api.com',\n    ticket_api_url: 'https://your-ticket-system.com/api',\n    company_info: {\n      name: 'Kirloskar Brothers Limited',\n      phone: '1800-123-4443',\n      email: 'support@kirloskarpumps.com',\n      address: 'Yamuna, S.No.98(3 to 7), Plot No.3, Baner, Pune 411045, Maharashtra, INDIA',\n      website: 'https://www.kirloskarpumps.com'\n    }\n  }\n};"
      },
      "id": "98660cde-95aa-474b-b481-a953005ae4ca",
      "name": "Global Settings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -420
      ]
    },
    {
      "parameters": {
        "jsCode": "// Merge all responses and format final output\nconst inputData = $input.all();\nlet finalResponse = {};\n\n// Find the response from any of the processing paths\nfor (const item of inputData) {\n  if (item.json.text || item.json.cards || item.json.buttons) {\n    finalResponse = item.json;\n    break;\n  }\n}\n\n// Add metadata\nfinalResponse.sessionId = $('Intent Classifier').first().json.sessionId;\nfinalResponse.timestamp = new Date().toISOString();\nfinalResponse.source = 'enhanced_kbl_chatbot';\n\nreturn { json: finalResponse };"
      },
      "id": "71cccba1-3f87-47e5-9b50-61cb6d68cf07",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2700,
        -260
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "1d91735d-3e27-4119-b090-fb670f0dd688",
      "name": "Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2900,
        -260
      ]
    }
  ],
  "connections": {
    "Chat Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Input Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Input Fields": {
      "main": [
        [
          {
            "node": "Intent Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Classifier": {
      "main": [
        [
          {
            "node": "Intent Router",
            "type": "main",
            "index": 0
          },
          {
            "node": "Authentication & Order Router",
            "type": "main",
            "index": 0
          },
          {
            "node": "Help & Contact Router",
            "type": "main",
            "index": 0
          },
          {
            "node": "RAG Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intent Router": {
      "main": [
        [
          {
            "node": "Fetch Categories",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Categories": {
      "main": [
        [
          {
            "node": "Format Category Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Category Response": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Authentication & Order Router": {
      "main": [
        [
          {
            "node": "Check User Session",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check User Session": {
      "main": [
        [
          {
            "node": "Session Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Session Exists?": {
      "main": [
        [
          {
            "node": "Fetch User Orders",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Request Mobile Number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Request Mobile Number": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch User Orders": {
      "main": [
        [
          {
            "node": "Format Orders List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Orders List": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Help & Contact Router": {
      "main": [
        [
          {
            "node": "Create Support Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Support Ticket": {
      "main": [
        [
          {
            "node": "Format Contact Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Contact Response": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Contact Info Only": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG Router": {
      "main": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced RAG Agent": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "List Documents Tool": {
      "ai_tool": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents Tool": {
      "ai_tool": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "Enhanced RAG Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Embeddings": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "a6455f48-ecd0-4fc3-b3f5-b25a9ad13840",
  "triggerCount": 0,
  "tags": []
}